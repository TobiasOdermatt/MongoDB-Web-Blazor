@page "/Dashboard"
@page "/"
@inject DBController DBController;
@inject NavigationManager navigationmanager;

@using MongoDB_Web.Pages.Component.Dashboard;
@using MongoDB_Web.Data.DB
<PageTitle>Dashboard</PageTitle>
@code {
     MongoDB_Web.Pages.Component.Dashboard.CreateDBModal? createDBModal { get; set; }
     MongoDB_Web.Pages.Component.Dashboard.ImportDBModal? importDBModal { get; set; }
}
<CreateDBModal @ref="createDBModal"></CreateDBModal>
<ImportDBModal @ref="importDBModal"></ImportDBModal>
<div class="top-div">
    <h2>List of all databases</h2>
    @{
        List<MongoDB.Bson.BsonDocument>? dbList = listAllDBs();
        int count = dbList != null ? dbList.Count : 0;
        int CollectionAmount = 0;
    }
    <p class="second-text-color resultText">@count Databases found</p>
    <button type="button" @onclick="() => createDBModal?.Open()" class="btn btn-primary navbutton">Create database</button>
    <button type="button" @onclick="() => importDBModal?.Open()" class="btn btn-primary navbutton">Import</button>
</div>
<br />
<div class="row bottom-div">
    @if (dbList is not null)
    {
        @foreach (MongoDB.Bson.BsonDocument db in dbList)
        {
            if (!string.IsNullOrEmpty(db.GetValue("name").ToString()))
                CollectionAmount = getCollectionAmount(db.GetValue("name").AsString);
            <ShowDBCard DBObject=db CollectionAmount=CollectionAmount />
        }
    }
</div>
@code {
    List<MongoDB.Bson.BsonDocument>? listAllDBs()
    {
        var dbs = DBController.ListAllDatabases();
        if(dbs == null)
        {
            navigationmanager.NavigateTo("api/Auth/Logout", true);
        }
        return dbs;
    }

    int getCollectionAmount(string dbName)
    {
        return DBController.GetNumberOfCollections(dbName);
    }
}