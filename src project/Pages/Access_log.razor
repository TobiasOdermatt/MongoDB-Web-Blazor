@page "/Access_log"
@using MongoDB_Web.Data.Helpers
@inject LogManager logManager;

<h1>Activity Protocol</h1>
<br />

<div class="row">
    <button @onclick="() => changeLogType(LogType.All)" class="infoBox col-2 page ">All @countOfAll</button>
    <button @onclick="() => changeLogType(LogType.Error)" class="infoBox col-2 page">Error @countOfError</button>
    <button @onclick="() => changeLogType(LogType.Warning)" class="infoBox col-2 page">Warning @countOfWarning</button>
    <button @onclick="() => changeLogType(LogType.Info)" class="infoBox col-2 page">Information @countOfInfo</button>
    <select @onchange="changeDate" class="col-3 page infoBox">
        @{
            if(availableLogDates != null)
                foreach (DateTime date in availableLogDates)
            {
                bool newlog = date.Date.Year == DateTime.Now.Year & date.Date.Month == DateTime.Now.Month;
                <option value="@date" selected="@newlog.ToString()" class="page">@date.Year/@date.Month</option>
            }
    }
</select>
<br />
    <table class="table page sortable">
        <thead>
            <tr>
                <th scope="col">Date</th>
                <th scope="col">Type</th>
                <th scope="col">Message</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in logManager.ReadLogFiles(currentType.ToString(), currentDate))
            {
                <tr>
                    <td>@log.Created</td>
                    <td>@log.Type</td>
                    <td>@log.Message</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code{
    int countOfInfo;
    int countOfWarning;
    int countOfError;
    int countOfAll;

    DateTime currentDate { get; set; }

    List<DateTime>? availableLogDates { get; set; }

    LogType currentType { get; set; } = LogType.All;

    public enum LogType
    {
        All,
        Info,
        Warning,
        Error
    }

    void changeLogType(LogType SelectedType)
    {
        currentType = SelectedType;
        refresh();
    }

    void changeDate(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            string dateString = e.Value?.ToString() ?? string.Empty;
            if (!string.IsNullOrEmpty(dateString))
            {
                currentDate = DateTime.Parse(dateString);
                refresh();
            }
        }
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        availableLogDates = logManager.GetAvailableLogDates();
        if (currentDate == DateTime.MinValue)
        {
            currentDate = DateTime.Now;
        }
        refresh();
    }
    
    void refresh()
    {
        (countOfInfo, countOfWarning, countOfError) = logManager.CountLog(currentDate);
        countOfAll = countOfError + countOfInfo + countOfWarning;
        StateHasChanged();
    }
}
