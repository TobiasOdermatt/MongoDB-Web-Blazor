@using Data.Helpers
@code {
    private BlazorServerMyMongo.Pages.Component.Dashboard.DeleteDBModal? DeleteDBModal { get; set; }
}
<DeleteDBModal @ref="DeleteDBModal" DBName="@name" />
<div class="col-lg-4 col-xl-3 col-md-5 mb-8 col-sm-12 py-3">
    <div class="shadow card h-100 rounded cardbox">
        <div class="card-header py-1">
            <div class="card-title">
            <h4 class="title-card">@name</h4>
                </div>
            <button type="button" @onclick="() => DeleteDBModal.Open()" class=" btn-close deleteicon blacktowhitetheme" aria-label="Close"></button>
            </div>
        <div class="card-body">
            <p class="card-text">Size on disk: @sizeOnDisk KB <br /> 
                @if (CollectionAmount != -1)
                {
                    <text>Collections: @CollectionAmount</text>
                }
                </p>
                    <br />
                </div>
        <div class="card-footer d-flex justify-content-between align-items-center">
            <div class="btn-group">
                <button type="button" class="btn btn-success dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Option
                </button>
                <ul class="dropdown-menu element-background">
                    <li><a class="dropdown-item element-background" href="#">Details</a></li>
                    <li><a class="dropdown-item element-background" href="#">Download</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item text-danger" href="" @onclick="() => DeleteDBModal.Open()" @onclick:preventDefault>Delete Database</a></li>
                </ul>
            </div>
            <a href="CollectionManager/@name" class="btn btn-primary">Open</a>
            </div>
    </div>
    </div>
@code {
    [Parameter]
    public MongoDB.Bson.BsonDocument DBObject { get; set; } = default!;
    [Parameter]
    public int CollectionAmount { get; set; }

    public string? name { get; set; } = "";
    public long? sizeOnDisk { get; set; } = 0;
    public bool? empty { get; set; } = false;

    protected override Task OnParametersSetAsync()
    {
        LoadCardData();
        return base.OnParametersSetAsync();
    }

    void LoadCardData()
    {
        try
        {
            DBObject = DBObject ?? new MongoDB.Bson.BsonDocument();

            if (!string.IsNullOrEmpty(DBObject.GetValue("name").ToString()))
                name = DBObject.GetValue("name").AsString;

            if (!string.IsNullOrEmpty(DBObject.GetValue("sizeOnDisk").ToString()))
                sizeOnDisk = (long)Math.Round(DBObject.GetValue("sizeOnDisk").AsDouble / 1000, MidpointRounding.AwayFromZero);

            if (!string.IsNullOrEmpty(DBObject.GetValue("empty").ToString()))
                empty = DBObject.GetValue("empty").AsBoolean;
        }
        catch (Exception ex)
        {
            LogManager logManager = new(LogManager.LogType.Error, "Failed loading DB details", ex);
        }
    }
    }