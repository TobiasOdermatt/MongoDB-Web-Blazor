@page "/CollectionViewer/{dbName}/{collectionname}/{itemsPerPage:int}/{currentPage:int}"
@page "/CollectionViewer/{dbName}/{collectionname}"
@page "/CollectionViewer/{dbName}/{collectionname}/{itemsPerPage:int}/{currentPage:int}/{SelectedKey}/{SearchValue}"
@page "/CollectionViewer/{dbName}/{collectionname}/{SelectedKey}/{SearchValue}"

@using Controllers
@using MongoDB.Bson
@using System.Web
@inject DBController DBController


<h2>View Collection: @collectionname</h2>
<ul class="navbar nav ml-auto search-box">
    <li>
        <select class="form-control-sm page" @bind="SelectedKey" style="display: @(@attributeKeyList.Count != 0 ? "block" : "none");">
            <option value="">All keys</option>
            @foreach (var attributeKey in attributeKeyList)
            {
                <option value="@attributeKey">@attributeKey</option>
            }
        </select>
    </li>

    <li>
        <input class="form-control form-control-sm page" @bind="SearchValue" type="text" placeholder="value...." aria-label="Search...">
    </li>

    <li>
        <button type="submit" class="form-control page form-control-sm btn btn-default" @onclick="Search">
            Search
        </button>
    </li>
    
    <li class="ms-auto right-nav-side">
        <button type="submit" class="form-control page form-control-sm btn btn-primary">
            <img src="../icons/settings.svg" class="svgicon whitetoblacktheme"> Adjust collection
        </button>
    </li>

    <li class="ms-2 right-nav-side">
        <button type="submit" class="form-control page form-control-sm btn btn-primary">
            <img src="../icons/insert.svg" class="svgicon whitetoblacktheme"> Insert collection
        </button>
    </li>

</ul>


<div class="row bottom-div" style="display: @(pageExist ? "block" : "none");">

    @if (collectionList == null)
    {
        <p class="text-danger">No collection on this page</p>
    }
    else
    {
        @foreach (var collection in displayedCollection)
        {
            <ViewCollection Collection="@collection" />
        }
    }
</div>

<br />
<br />
<div class="pagination">
    <button class="btn btn-link" @onclick="PreviousPage" disabled="@IsPreviousButtonDisabled">Previous</button>
    <span>Page @currentPage of @totalPages</span>
    <button class="btn btn-link" @onclick="NextPage" disabled="@IsNextButtonDisabled">Next</button>
</div>

@code {
    [Inject]
    IJSRuntime? jsRuntime { get; set; }

    [Parameter]
    public string? dbName { get; set; }
    [Parameter]
    public string? collectionname { get; set; }
    [Parameter]
    public int itemsPerPage { get; set; } = 10;
    [Parameter]
    public int currentPage { get; set; } = 1;
    [Parameter]
    public string SelectedKey { get; set; } = "";
    [Parameter]
    public string SearchValue { get; set; } = "";


    List<string>? collectionList;
    List<string> attributeKeyList = new List<string>();
    List<string> displayedCollection = new List<string>();
    int totalPages = 1;
    bool pageExist = true;

    private bool IsPreviousButtonDisabled => currentPage == 1;
    private bool IsNextButtonDisabled => currentPage >= totalPages;

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        SelectedKey = HttpUtility.ParseQueryString(uri.Query).Get("key") ?? "";
        SearchValue = HttpUtility.ParseQueryString(uri.Query).Get("search") ?? "";
    }

    List<string>? listCollection()
    {
        if (dbName is null || collectionname is null)
            return null;

        return DBController.GetCollection(dbName, collectionname);
    }
    void initParameter()
    {
        if (itemsPerPage == 0 && currentPage == 0)
        {
            itemsPerPage = 10; currentPage = 1;
        }

    }

    protected override void OnParametersSet()
    {
        initParameter();
        collectionList = listCollection();
        UpdateDisplayedCollection();
        attributeKeyList = DBController.GetCollectionAttributes(dbName, collectionname);
    }

    private void UpdateDisplayedCollection()
    {
        if (collectionList == null) { return; }

        var filteredCollection = collectionList;

        if (!string.IsNullOrWhiteSpace(SearchValue))
        {
            bool showAll = string.IsNullOrWhiteSpace(SelectedKey);
            filteredCollection = filteredCollection
                .Where(item =>
                    (string.IsNullOrWhiteSpace(SelectedKey) || item.Contains(SelectedKey)) &&
                    ((string.IsNullOrWhiteSpace(SearchValue) || AllOrSpecific(item,showAll)))
                )
                .ToList();
        }

        int startIndex = (currentPage - 1) * itemsPerPage;
        int endIndex = startIndex + itemsPerPage;
        displayedCollection = filteredCollection.Skip(startIndex).Take(itemsPerPage).ToList();
        totalPages = (int)Math.Ceiling((double)filteredCollection.Count / itemsPerPage);
    }

    bool AllOrSpecific(string item, bool showAll)
    {
        if (showAll){
            return item.Contains(SearchValue);
        }
        var jsonObject = MongoDB.Bson.Serialization.BsonSerializer.Deserialize<BsonDocument>(item);
        if (jsonObject.Contains(SelectedKey))
        {
            var selectedKeyValue = jsonObject[SelectedKey].ToString();
            if(selectedKeyValue == null){ return false; }
            return selectedKeyValue.Contains(SearchValue);
        }
        return false;
    }

    private void Search()
    {
        currentPage = 1;
        UpdateDisplayedCollection();
        ChangeUrl();
    }


    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdateDisplayedCollection();
            ChangeUrl();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdateDisplayedCollection();
            ChangeUrl();
        }
    }
    private void ChangeUrl()
    {
        string newUrl = $"/CollectionViewer/{dbName}/{collectionname}/{itemsPerPage}/{currentPage}?key={SelectedKey}&search={SearchValue}";
        jsRuntime?.InvokeVoidAsync("changeUrl", newUrl);
    }


}
